#!/usr/bin/env python3

import psycopg2
from psycopg2 import sql
import hashlib
from passlib.context import CryptContext

# Configura√ß√µes do banco
DB_CONFIG = {
    'host': 'db',
    'port': 5432,
    'database': 'erp_db', 
    'user': 'erp_user',
    'password': 'erp_password'
}

def fix_admin_email():
    """Atualiza o email do usu√°rio admin para um formato v√°lido"""
    
    try:
        # Conectar ao banco
        print("üîó Conectando ao banco de dados...")
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        # Verificar se existe usu√°rio com admin@local
        cur.execute("SELECT id, email FROM users WHERE email = 'admin@local'")
        user = cur.fetchone()
        
        if user:
            user_id, old_email = user
            print(f"üìß Usu√°rio encontrado: {old_email}")
            
            # Atualizar email
            new_email = 'admin@localhost.com'
            cur.execute("UPDATE users SET email = %s WHERE id = %s", (new_email, user_id))
            
            print(f"‚úÖ Email atualizado de {old_email} para {new_email}")
        else:
            print("‚ùå Usu√°rio admin@local n√£o encontrado")
            
            # Verificar se j√° existe admin@localhost.com
            cur.execute("SELECT id, email FROM users WHERE email = 'admin@localhost.com'")
            existing = cur.fetchone()
            
            if existing:
                print("‚úÖ Usu√°rio admin@localhost.com j√° existe")
            else:
                # Criar usu√°rio com email v√°lido
                pwd_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
                hashed_password = pwd_context.hash('Admin!123')
                
                cur.execute("""
                    INSERT INTO users (id, email, hashed_password, full_name, is_active, role, created_at, updated_at) 
                    VALUES (gen_random_uuid(), %s, %s, %s, %s, %s, NOW(), NOW())
                """, ('admin@localhost.com', hashed_password, 'Administrador do Sistema', True, 'ADMIN'))
                
                print("‚úÖ Novo usu√°rio admin@localhost.com criado")
        
        # Confirmar transa√ß√£o
        conn.commit()
        
        # Listar usu√°rios
        cur.execute("SELECT email, full_name, role FROM users")
        users = cur.fetchall()
        
        print("\nüë• Usu√°rios no sistema:")
        for email, name, role in users:
            print(f"  üìß {email} - {name} ({role})")
        
        return True
        
    except psycopg2.Error as e:
        print(f"‚ùå Erro no banco de dados: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro geral: {e}")
        return False
    finally:
        if 'cur' in locals():
            cur.close()
        if 'conn' in locals():
            conn.close()

if __name__ == "__main__":
    success = fix_admin_email()
    if success:
        print("\nüéâ Email do admin corrigido com sucesso!")
        print("üìß Use: admin@localhost.com")
        print("üîë Senha: Admin!123")
    else:
        print("‚ùå Falha ao corrigir email!")
